{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "DecoratorsPluginOptions": {
      "properties": {
        "decoratorsBeforeExport": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "EstreePluginOptions": {
      "properties": {
        "classFeatures": {
          "type": "boolean"
        }
      }
    },
    "FlowPluginOptions": {
      "properties": {
        "all": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ImportAttributesPluginOptions": {
      "properties": {
        "deprecatedAssertSyntax": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PipelineOperatorPluginOptions": {
      "properties": {
        "proposal": {
          "enum": ["fsharp", "minimal", "smart"],
          "type": "string"
        }
      },
      "type": "object"
    },
    "RecordAndTuplePluginOptions": {
      "properties": {
        "syntaxType": {
          "enum": ["bar", "hash"],
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "allowAwaitOutsideFunction": {
      "description": "By default, await use is not allowed outside of an async function.\nSet this to true to accept such code.",
      "type": "boolean"
    },
    "allowImportExportEverywhere": {
      "description": "By default, import and export declarations can only appear at a program's top level.\nSetting this option to true allows them anywhere where a statement is allowed.",
      "type": "boolean"
    },
    "allowReturnOutsideFunction": {
      "description": "By default, a return statement at the top level raises an error.\nSet this to true to accept such code.",
      "type": "boolean"
    },
    "allowNewTargetOutsideFunction": {
      "description": "By default, new.target use is not allowed outside of a function or class.\nSet this to true to accept such code.",
      "type": "boolean"
    },
    "allowSuperOutsideMethod": {
      "type": "boolean"
    },
    "allowUndeclaredExports": {
      "description": "By default, exported identifiers must refer to a declared variable.\nSet this to true to allow export statements to reference undeclared variables.",
      "type": "boolean"
    },
    "createImportExpressions": {
      "description": "By default, `import(foo)` is parsed as `CallExpression(Import, [Identifier(foo)])`.\nSet this to true to parse it as an `ImportExpression` node.",
      "type": "boolean",
      "default": false
    },
    "createParenthesizedExpressions": {
      "description": "By default, the parser adds information about parentheses by setting\n`extra.parenthesized` to `true` as needed.\nWhen this option is `true` the parser creates `ParenthesizedExpression`\nAST nodes instead of using the `extra` property.",
      "type": "boolean"
    },
    "errorRecovery": {
      "description": "By default, Babel always throws an error when it finds some invalid code.\nWhen this option is set to true, it will store the parsing error and\ntry to continue parsing the invalid input file.",
      "type": "boolean"
    },
    "plugins": {
      "description": "Array containing the plugins that you want to enable.",
      "items": {
        "anyOf": [
          {
            "items": [
              {
                "enum": ["decorators"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/DecoratorsPluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "enum": ["estree"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/EstreePluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "enum": ["importAttributes"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/ImportAttributesPluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "enum": ["pipelineOperator"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/PipelineOperatorPluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "enum": ["recordAndTuple"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/RecordAndTuplePluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "enum": ["flow"],
                "type": "string"
              },
              {
                "$ref": "#/definitions/FlowPluginOptions"
              }
            ],
            "additionalItems": false,
            "type": "array"
          },
          {
            "items": [
              {
                "type": "string",
                "enum": ["optionalChainingAssign"]
              },
              {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "enum": ["2023-07"]
                  }
                }
              }
            ]
          },
          {
            "enum": [
              "asyncDoExpressions",
              "decorators",
              "decorators-legacy",
              "decoratorAutoAccessors",
              "deferredImportEvaluation",
              "destructuringPrivate",
              "doExpressions",
              "estree",
              "explicitResourceManagement",
              "exportDefaultFrom",
              "flow",
              "flowComments",
              "functionBind",
              "functionSent",
              "importAssertions",
              "importAttributes",
              "importMeta",
              "importReflection",
              "jsx",
              "moduleBlocks",
              "partialApplication",
              "pipelineOperator",
              "placeholders",
              "sourcePhaseImports",
              "throwExpressions",
              "typescript",
              "v8intrinsic"
            ],
            "type": "string"
          }
        ]
      },
      "type": "array"
    },
    "ranges": {
      "description": "Adds a ranges property to each node: [node.start, node.end]",
      "type": "boolean"
    },
    "sourceFilename": {
      "description": "Correlate output AST nodes with their source filename.\nUseful when generating code and source maps from the ASTs of multiple input files.",
      "type": "string"
    },
    "sourceType": {
      "description": "Indicate the mode the code should be parsed in.\nCan be one of \"script\", \"module\", or \"unambiguous\". Defaults to \"script\".\n\"unambiguous\" will make @babel/parser attempt to guess, based on the presence\nof ES6 import or export statements.\nFiles with ES6 imports and exports are considered \"module\" and are otherwise \"script\".",
      "enum": ["module", "script", "unambiguous"],
      "type": "string"
    },
    "startLine": {
      "description": "By default, the first line of code parsed is treated as line 1.\nYou can provide a line number to alternatively start with.\nUseful for integration with other source tools.",
      "type": "number"
    },
    "strictMode": {
      "description": "Should the parser work in strict mode.\nDefaults to true if sourceType === 'module'. Otherwise, false.",
      "type": "boolean"
    },
    "tokens": {
      "description": "Adds all parsed tokens to a tokens property on the File node.",
      "type": "boolean"
    }
  },
  "type": "object"
}
