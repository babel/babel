function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var u = n && n.prototype instanceof Generator ? n : Generator, c = Object.create(u.prototype); return _regeneratorDefine(c, "_invoke", function (r, n, o) { var i, u, c, f = 0, p = o || [], y = !1, d = { prev: 0, next: 0, sent: e, abrupt: l, finish: l.bind(e, 4), delegateYield: function (t, r) { return i = _regeneratorValues(t), u = 0, c = e, d.next = r, a; } }; function l(r, n) { for (u = r, c = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], l = d.prev, s = i[2]; r > 3 ? (o = s === n) && (u = i[4] || 3, c = i[5] === e ? i[3] : i[5], i[4] = 3, i[5] = e) : i[0] <= l && ((o = r < 2 && l < i[1]) ? (u = 0, d.sent = n, d.next = i[1]) : l < s && (o = r < 3 || i[0] > n || n > s) && (i[4] = r, i[5] = n, d.next = s, u = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, s) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && l(p, s), u = p, c = s; (t = u < 2 ? e : c) || !y;) { i || (u ? u < 3 ? (u > 1 && (d.next = -1), l(u, c)) : d.next = c : d.sent = c); try { if (f = 2, i) { if (u || (o = "next"), t = i[o]) { if (!(t = t.call(i, c))) throw TypeError("iterator result is not an object"); if (!t.done) return t; c = t.value, u < 2 && (u = 0); } else 1 === u && (t = i.return) && t.call(i), u < 2 && (c = TypeError("The iterator does not provide a '" + o + "' method"), u = 1); i = e; } else if ((t = (y = d.next < 0) ? c : r.call(n, d)) !== a) break; } catch (t) { i = e, u = 1, c = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), c; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} _regeneratorDefine(t = {}, n, function () { return this; }); var u = [][n] ? Iterator.prototype : t, c = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(u); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, o, "GeneratorFunction")), e.prototype = Object.create(c), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(c, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefineIM(c), _regeneratorDefine(c, o, "Generator"), _regeneratorDefine(c, n, function () { return this; }), _regeneratorDefine(c, "toString", function () { return "[object Generator]"; }), (_regenerator = function () { return { w: i, m: f }; })(); }
function _regeneratorValues(e) { if (null != e) { var t = e["function" == typeof Symbol && Symbol.iterator || "@iterator"], r = 0; if (t) return t.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) return { next: function () { return e && r >= e.length && (e = 0), { value: e && e[r++], done: !e }; } }; } throw new TypeError(typeof e + " is not iterable"); }
function _regeneratorDefineIM(e) { function n(n, t) { _regeneratorDefine(e, n, function (e) { return this._invoke(n, t, e); }); } n("next", 0), n("throw", 1), n("return", 2); }
function _regeneratorDefine(e, r, n, t) { _regeneratorDefine = function (e, r, n, t) { Object.defineProperty(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }); }; try { _regeneratorDefine({}, ""); } catch (e) { _regeneratorDefine = function (e, r, n) { e[r] = n; }; } _regeneratorDefine(e, r, n, t); }
var _marked = /*#__PURE__*/_regenerator().m(f);
function f() {
  return _regenerator().w(function (_context) {
    while (1) switch (_context.next) {
      case 0:
        return _context.abrupt(2);
    }
  }, _marked);
}
