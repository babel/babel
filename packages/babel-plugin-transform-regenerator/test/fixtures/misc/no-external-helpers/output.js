function _regenerator() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, r, t = Object.prototype, n = t.hasOwnProperty, o = "function" == typeof Symbol ? Symbol : {}, i = o.iterator || "@@iterator", a = o.toStringTag || "@@toStringTag", f = ["next", "throw", "return"]; function u(t, n, o, i) { var a = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(a.prototype); return _regeneratorDefine(u, "_invoke", function (t, n, o) { var i = 1; function a(r) { var t = r[4] || {}; t.type = 0, t.arg = e, r[4] = t; } var u, p, y = [[-1]].concat(o || []), l = !1, v = 0, s = e; y.forEach(a); var d = { prev: 0, next: 0, sent: e, stop: g, abrupt: G, finish: function (e) { for (var r = y.length - 1; r >= 0; --r) { var t = y[r]; if (t[2] === e) return F(t[4], t[3]), a(t), c; } }, catch: function (e) { for (var r = y.length - 1; r >= 0; --r) { var t = y[r]; if (t[0] === e) { var n = t[4]; if (1 === n.type) { var o = n.arg; a(t); } return o; } } }, delegateYield: function (r, t) { return p = _regeneratorValues(r), s = e, d.next = t, c; } }; function g() { l = !0; var e = y[0][4]; if (1 === e.type) throw e.arg; return u; } function h(r) { if (l) throw r; function t(e) { i.type = 1, i.arg = r, d.next = e; } for (var n = y.length - 1; n >= 0; --n) { var o = y[n], i = o[4], a = d.prev, f = o[1], u = o[2]; if (-1 === o[0]) return t(-1), !1; if (null != o[0] && o[0] <= a) { if (a < f) return v = 0, s = e, t(f), !0; if (a < u) return t(u), !1; } } } function G(e, r) { for (var t = y.length - 1; t >= 0; --t) { var n = y[t]; if (n[0] > -1 && n[0] <= d.prev && d.prev < n[2]) { var o = n; break; } } o && (2 === e || 3 === e) && o[0] <= r && r <= o[2] && (o = null); var i = o ? o[4] : {}; return i.type = e, i.arg = r, o ? (v = 0, d.next = o[2], c) : F(i); } function F(e, r) { if (1 === e.type) throw e.arg; return 2 === e.type || 3 === e.type ? d.next = e.arg : 4 === e.type ? (u = s = e.arg, v = 2, d.next = -1) : 0 === e.type && r && (d.next = r), c; } return function (o, a) { if (o = f.indexOf(o), 3 === i) throw Error("Generator is already running"); if (4 === i) { if (1 === o) throw a; return { value: e, done: !0 }; } for (v = o, s = a;;) { if (!p) if (0 === v) d.sent = s;else if (1 === v) { if (1 === i) throw i = 4, s; h(s); } else 2 === v && G(4, s); try { if (p) { if (r = p[f[v]]) { if (r = r.call(p, s)) { if (r || (v = 1, s = new TypeError("iterator result is not an object")), !r.done) return r; 2 !== v && (v = 0, s = r.value); } } else 1 === v && (r = p.return) && r.call(p), 2 !== v && (s = new TypeError("The iterator does not provide a '" + f[v = 1] + "' method")); p = e; } else if (i = 3, r = (-1 === d.next ? g : t).call(n, d), i = l ? 4 : 2, r !== c) return { value: r, done: l }; } catch (r) { i = 4, p = e, v = 1, s = r; } } }; }(t, o, i), !0), u; } var c = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; _regeneratorDefine(p, i, function () { return this; }); var y = Object.getPrototypeOf, l = y && y(y(_regeneratorValues([]))); l && l !== t && n.call(l, i) && (p = l); var v = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function s(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e, a, "GeneratorFunction")), e.prototype = Object.create(v), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(v, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = _regeneratorDefine(GeneratorFunctionPrototype, a, "GeneratorFunction"), _regeneratorDefineIM(v), _regeneratorDefine(v, a, "Generator"), _regeneratorDefine(v, i, function () { return this; }), _regeneratorDefine(v, "toString", function () { return "[object Generator]"; }), (_regenerator = function () { return { w: u, m: s }; })(); }
function _regeneratorValues(e) { if (null != e) { var r = e["function" == typeof Symbol && Symbol.iterator || "@iterator"]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var t = -1, n = function r() { for (; ++t < e.length;) if ({}.hasOwnProperty.call(e, t)) return r.value = e[t], r.done = !1, r; return r.value = void 0, r.done = !0, r; }; return n.next = n; } } throw new TypeError(typeof e + " is not iterable"); }
function _regeneratorDefineIM(e) { function n(n) { _regeneratorDefine(e, n, function (e) { return this._invoke(n, e); }); } n("next"), n("throw"), n("return"); }
function _regeneratorDefine(e, r, n, t) { _regeneratorDefine = function (e, r, n, t) { return Object.defineProperty(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }); }; try { _regeneratorDefine({}, ""); } catch (e) { _regeneratorDefine = function (e, r, n) { return e[r] = n; }; } return _regeneratorDefine(e, r, n, t); }
var _marked = /*#__PURE__*/_regenerator().m(f);
function f() {
  return _regenerator().w(function (_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        return _context.stop();
    }
  }, _marked);
}
